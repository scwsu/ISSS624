{
  "hash": "499a5f6e037d6ee607f58728688206e3",
  "result": {
    "markdown": "---\ntitle: \"1A: Geospatial Data Wrangling with R\"\nauthor: \"Su Sandi Cho Win\"\ndate: \"19 November 2023\"\ndate-modified: \"last-modified\"\nformat: html\nexecute:\n  echo: true\n  eval: true\n  warning: false\neditor: visual\n---\n\n\n## 1. Overview\n\nIn this hands-on exercise, I learn how to import and wrangle geospatial data in using appropriate R Packages.\n\n## 2. Getting Started\n\nThe following code chunk installs and loads **sf** and **tidyverse** packages into R environment.\n\n::: callout-note\n**sf** package is used for importing, managing, and processing geospatial data.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\nThe data sets used are:\n\n-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://beta.data.gov.sg/)\n\n-   Pre-Schools Location from [data.gov.sg](https://beta.data.gov.sg/)\n\n-   Cycling Path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html)\n\n-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data/)\n\n## 3. Importing Geospatial Data\n\n### 3.1. Importing Polygon Feature Data\n\nThe following code chunk uses \\`st_read()\\` function from the **sf** package to import \\`MP14_SUBZONE_WEB_PL\\` shapefile into R as **polygon feature data** frame.\n\n::: callout-note\nWhen loading geospatial data in shapefile format, two arguments are utilized: firstly, `dsn` to specify the data path, and secondly, `layer` to indicate the name of the shapefile. It's not necessary to include file extensions such as .shp, .dbf, .prj, or .shx.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\scwsu\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nThe \\`mpsz\\` simple feature data frame consists of **323** multipolygon features and includes **15** fields. It is defined using the **svy21** projected coordinate system.\n\n::: callout-note\nThe **svy21**, also known as the Singapore **svy21** Projected Coordinate System, is a coordinate system employed by Singapore. It uses the Transverse Mercator projection, mapping geographical coordinates that reference the WGS 84 ellipsoid.\n\nThe bounding box of this system displays the extent of the data in both the x and y dimensions.\n:::\n\n### 3.2. Importing Polyline Feature Data\n\nThe following code chunk uses \\`st_read()\\` function from the **sf** package to import \\`CyclingPath\\` shapefile into R as **line feature data** frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath <- st_read(dsn = \"data/geospatial\",\n                       layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CyclingPathGazette' from data source \n  `D:\\scwsu\\ISSS624\\Hands-on_Ex1\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 2558 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42626.09 ymax: 48948.15\nProjected CRS: SVY21\n```\n:::\n:::\n\n\nThe \\`cyclingpath\\` linestring feature data frame contains a total of **2558** features and comprises **2** fields. It is also defined within the **svy21** projected coordinate system.\n\n### 3.3. Importing GIS Data\n\nThe following code chunk uses \\`st_read()\\` function from the **sf** package to import \\`PreSchoolsLocation\\` into R.\n\n::: callout-note\nThe complete path and kml file extension must be provided in kml format.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool <- st_read(\"data/geospatial/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `D:\\scwsu\\ISSS624\\Hands-on_Ex1\\data\\geospatial\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nThe \\`preschool\\` point feature data frame contains a combined total of **2290** features and comprises **2** fields. Notably, unlike the two preceding simple feature data frames, \\`preschool\\` employs the **wgs84** geographic coordinate system.\n\n::: callout-note\n**wgs84** represents the latest version of the World Geodetic System (WGS), a global standard utilized in fields like cartography, geodesy, and satellite navigation, including GPS. It is a geographic coordinate system that determines locations on Earth using a three-dimensional spherical surface model.\n:::\n\n## **4. Checking the Content of A Simple Feature Data Frame**\n\nThe column in the simple feature (sf) data frame that holds the geometries is structured as a list with a class of **sfc**. There are two methods to inspect the data within it:\n\n-   Obtain the geometry list-column by using either \\`mpsz\\$geom\\` or \\`mpsz\\[\\[i\\]\\]\\`.\n\n-   Utilize \\`st_geometry\\` to present details about the feature class, including information about the geometry type, the geographic extent of the features, and the coordinate system used in the data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n```\n:::\n:::\n\n\nA peek into the data using the \\`glimpse\\` function from the **dplyr** package unveils relevant attribute details, including the data type of each field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 323\nColumns: 16\n$ OBJECTID   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO <int> 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  <chr> \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  <chr> \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     <chr> \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N <chr> \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C <chr> \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    <chr> \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D <date> 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     <dbl> 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     <dbl> 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng <dbl> 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area <dbl> 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   <MULTIPOLYGON [m]> MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…\n```\n:::\n:::\n\n\nUsing \\`head()\\` in the base R provides a comprehensive view of a feature object\\`s information.\n\n::: callout-note\nAdjust the \"n\" argument to modify the number of observations to a reasonable value.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\nProjected CRS: SVY21\n  OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n  PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n    Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n```\n:::\n:::\n\n\n## **5. Plotting Geospatial Data**\n\nIn the realm of geospatial data analytics, merely examining feature details is inadequate. To visualize geospatial features, you can employ the \\`plot()\\` function from **R Graphic**.\n\n::: callout-note\nBy default, a sf object generates a multiplot. The subsequent plot illustrates the initial 9 of 15 attributes. To adjust the quantity of attributes displayed in the plot, modify the \\`max.plot\\` parameter to a desired value.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nTo plot the geometric data exclusively , apply \\`st_geometry\\` to the data frame prior to initiating the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nA plot focusing on a particular attribute of the sf object can also be created.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(mpsz[\"SUBZONE_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(mpsz[\"REGION_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-10-3.png){width=672}\n:::\n:::\n\n\n::: callout-note\n\\`plot()\\` is meant for plotting the geospatial object for a quick look. For high cartographic quality plot, other R package such as **tmap** should be used.\n:::\n\n## **6. Map Projection**\n\nMap projection is a critical characteristic of geospatial data. To carry out geoprocessing tasks with two different geospatial datasets, they need to be aligned within the same coordinate system.\n\nThe process of transforming a simple feature data frame from one coordinate system to another is technically referred to as **projection transformation**.\n\n### 6.1. Assigning EPSG code to a simple feature data frame\n\nTypical problems that may arise while importing geospatial data into R include:\n\n-   The absence of a coordinate system for the original data, which can occur if, for instance, the .proj file is missing for an ESRI shapefile.\n\n-   Incorrect assignment of a coordinate system during the import procedure.\n\nTo examine the coordinate system of the \\`mpsz\\` simple feature data frame, employ the \\`st_crs()\\` function from the **sf** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n:::\n:::\n\n\nThe printout above shows the EPSG as 9001. Nonetheless, the \\`mpsz\\` data frame actually utilizes the **svy21** projection, for which the appropriate EPSG code is 3414. To apply the right EPSG code to the \\`mpsz\\` data frame, utilize the \\`st_set_crs()\\` function from the **sf** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_set_crs(mpsz, 3414)\n```\n:::\n\n\nThe EPSG code indicated is now 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\n### 6.2 **Transforming the projection of preschool from wgs84 to svy21**\n\nIn geospatial analytics, it is a common practice to convert data from a Geographic Coordinate System (GCS) to a Projected Coordinate System (PCS). GCS may not be suitable for analyses that require accurate distance or area measurements, as the length of one degree varies significantly with latitude --- it\\`s shorter near the poles and longer near the equator. On the other hand, PCS offers uniform measurements of length and area across different locations. The \\`st_transform()\\` function in the **sf** package is used for mathematically reprojecting data frames from one coordinate system to another.\n\nGiven that the \\`preschool\\` data frame is currently in the **wgs84** coordinate system, it can be effectively transformed to the **svy21** projected coordinate system, which has the coordinate reference system (CRS) code of 3414.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool3414 <- st_transform(preschool, \n                              crs = 3414)\n```\n:::\n\n\n\\`preschool3414\\` data frame is now in **svy21** projected coordinate system.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(preschool3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n```\n:::\n:::\n\n\n::: callout-note\nThe success of the transformation can be confirmed by examining the x and y extents of the data as shown in the Bounding Box. Most geographic coordinate systems operate within a decimal degree range of 0-360. However, after the projection transformation of the \\`preschool3414\\` data frame, the x and y extents of the data will be significantly greater than 360, indicating the change to a projected coordinate system.\n:::\n\n## **7. Importing and Converting an Aspatial Data**\n\nTypically, one might encounter aspatial data that includes two separate fields representing the x- and y-coordinates of the data points. Such aspatial data can be transformed from a tibble data frame into a simple feature data frame, enabling more comprehensive geospatial analysis.\n\n### 7.1. **Importing Aspatial Data as Tibble Data Frame**\n\nThe following code chunk uses \\`read_csv()\\` function of **readr** package to import the \\`listings.csv\\` data from Airbnb. The output R object is a tibble data frame called \\`listings\\`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings <- read_csv(\"data/aspatial/listings.csv\")\n```\n:::\n\n\nThe following code chunk uses \\`list()\\` of **Base R** instead of \\`glimpse()\\` to examine if the data file has been imported correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(listings) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\n# A tibble: 3,483 × 75\n       id listing_url            scrape_id last_scraped source name  description\n    <dbl> <chr>                      <dbl> <date>       <chr>  <chr> <chr>      \n 1  71609 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Vill… For 3 room…\n 2  71896 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… <b>The spa…\n 3  71903 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… Like your …\n 4 275343 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 5 275344 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… Lovely hom…\n 6 289234 https://www.airbnb.co…   2.02e13 2023-09-23   previ… Home… This whole…\n 7 294281 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… I have 3 b…\n 8 324945 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n 9 330095 https://www.airbnb.co…   2.02e13 2023-09-23   city … Rent… **IMPORTAN…\n10 369141 https://www.airbnb.co…   2.02e13 2023-09-23   city … Plac… A room in …\n# ℹ 3,473 more rows\n# ℹ 68 more variables: neighborhood_overview <chr>, picture_url <chr>,\n#   host_id <dbl>, host_url <chr>, host_name <chr>, host_since <date>,\n#   host_location <chr>, host_about <chr>, host_response_time <chr>,\n#   host_response_rate <chr>, host_acceptance_rate <chr>,\n#   host_is_superhost <lgl>, host_thumbnail_url <chr>, host_picture_url <chr>,\n#   host_neighbourhood <chr>, host_listings_count <dbl>, …\n```\n:::\n:::\n\n\nThe \\`listing\\` tibble data frame consists of 3483 rows and 18 columns. For the next step, \\`latitude\\` and \\`longitude\\` columns will be used.\n\n::: callout-note\n\\`latitude\\` and \\`longitude\\` columns are in decimal degree format, suggesting that the data could be in **wgs84** geographic coordinate system.\n:::\n\n### 7.2. **Converting Tibble Data Frame to Simple Feature Data Frame**\n\nThe following code chunk converts \\`listing\\` data frame into a simple feature data frame using \\`st_as_sf()\\` of **sf** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlistings_sf <- st_as_sf(listings,\n                        coords = c(\"longitude\", \"latitude\"),\n                        crs = 4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\n::: callout-note\nThe \\`coords\\` argument necessitates specifying the column name for the x-coordinates first, followed by the column name for the y-coordinates.\n:::\n\n::: callout-note\nThe \\`crs\\` argument needs the coordinate system to be defined in the EPSG format. For instance, EPSG 4326 corresponds to the **wgs84** geographic coordinate system, while EPSG 3414 represents the **svy21** projected coordinate system. For EPSG codes of other countries, you can consult the website **epsg.io**.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(listings_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 3,483\nColumns: 74\n$ id                                           <dbl> 71609, 71896, 71903, 2753…\n$ listing_url                                  <chr> \"https://www.airbnb.com/r…\n$ scrape_id                                    <dbl> 2.023092e+13, 2.023092e+1…\n$ last_scraped                                 <date> 2023-09-23, 2023-09-23, …\n$ source                                       <chr> \"previous scrape\", \"previ…\n$ name                                         <chr> \"Villa in Singapore · ★4.…\n$ description                                  <chr> \"For 3 rooms.Book room 1&…\n$ neighborhood_overview                        <chr> NA, NA, \"Quiet and view o…\n$ picture_url                                  <chr> \"https://a0.muscache.com/…\n$ host_id                                      <dbl> 367042, 367042, 367042, 1…\n$ host_url                                     <chr> \"https://www.airbnb.com/u…\n$ host_name                                    <chr> \"Belinda\", \"Belinda\", \"Be…\n$ host_since                                   <date> 2011-01-29, 2011-01-29, …\n$ host_location                                <chr> \"Singapore\", \"Singapore\",…\n$ host_about                                   <chr> \"Hi My name is Belinda -H…\n$ host_response_time                           <chr> \"within a few hours\", \"wi…\n$ host_response_rate                           <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_acceptance_rate                         <chr> \"100%\", \"100%\", \"100%\", \"…\n$ host_is_superhost                            <lgl> FALSE, FALSE, FALSE, FALS…\n$ host_thumbnail_url                           <chr> \"https://a0.muscache.com/…\n$ host_picture_url                             <chr> \"https://a0.muscache.com/…\n$ host_neighbourhood                           <chr> \"Tampines\", \"Tampines\", \"…\n$ host_listings_count                          <dbl> 5, 5, 5, 52, 52, 5, 7, 52…\n$ host_total_listings_count                    <dbl> 15, 15, 15, 65, 65, 15, 8…\n$ host_verifications                           <chr> \"['email', 'phone']\", \"['…\n$ host_has_profile_pic                         <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ host_identity_verified                       <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ neighbourhood                                <chr> NA, NA, \"Singapore, Singa…\n$ neighbourhood_cleansed                       <chr> \"Tampines\", \"Tampines\", \"…\n$ neighbourhood_group_cleansed                 <chr> \"East Region\", \"East Regi…\n$ property_type                                <chr> \"Private room in villa\", …\n$ room_type                                    <chr> \"Private room\", \"Private …\n$ accommodates                                 <dbl> 3, 1, 2, 1, 1, 4, 2, 1, 1…\n$ bathrooms                                    <lgl> NA, NA, NA, NA, NA, NA, N…\n$ bathrooms_text                               <chr> \"1 private bath\", \"Shared…\n$ bedrooms                                     <dbl> NA, NA, NA, NA, NA, 3, NA…\n$ beds                                         <dbl> 3, 1, 2, 1, 1, 5, 1, 1, 1…\n$ amenities                                    <chr> \"[\\\"Private backyard \\\\u2…\n$ price                                        <chr> \"$150.00\", \"$80.00\", \"$80…\n$ minimum_nights                               <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights                               <dbl> 365, 365, 365, 999, 999, …\n$ minimum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_minimum_nights                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ minimum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ maximum_maximum_nights                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ minimum_nights_avg_ntm                       <dbl> 92, 92, 92, 60, 60, 92, 9…\n$ maximum_nights_avg_ntm                       <dbl> 1125, 1125, 1125, 1125, 1…\n$ calendar_updated                             <lgl> NA, NA, NA, NA, NA, NA, N…\n$ has_availability                             <lgl> TRUE, TRUE, TRUE, TRUE, T…\n$ availability_30                              <dbl> 28, 28, 28, 1, 30, 28, 30…\n$ availability_60                              <dbl> 58, 58, 58, 1, 60, 58, 60…\n$ availability_90                              <dbl> 88, 88, 88, 1, 90, 88, 90…\n$ availability_365                             <dbl> 89, 89, 89, 275, 274, 89,…\n$ calendar_last_scraped                        <date> 2023-09-23, 2023-09-23, …\n$ number_of_reviews                            <dbl> 20, 24, 47, 22, 17, 12, 1…\n$ number_of_reviews_ltm                        <dbl> 0, 0, 0, 0, 3, 0, 0, 1, 3…\n$ number_of_reviews_l30d                       <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 1…\n$ first_review                                 <date> 2011-12-19, 2011-07-30, …\n$ last_review                                  <date> 2020-01-17, 2019-10-13, …\n$ review_scores_rating                         <dbl> 4.44, 4.16, 4.41, 4.40, 4…\n$ review_scores_accuracy                       <dbl> 4.37, 4.22, 4.39, 4.16, 4…\n$ review_scores_cleanliness                    <dbl> 4.00, 4.09, 4.52, 4.26, 4…\n$ review_scores_checkin                        <dbl> 4.63, 4.43, 4.63, 4.47, 4…\n$ review_scores_communication                  <dbl> 4.78, 4.43, 4.64, 4.42, 4…\n$ review_scores_location                       <dbl> 4.26, 4.17, 4.50, 4.53, 4…\n$ review_scores_value                          <dbl> 4.32, 4.04, 4.36, 4.63, 4…\n$ license                                      <chr> NA, NA, NA, \"S0399\", \"S03…\n$ instant_bookable                             <lgl> FALSE, FALSE, FALSE, TRUE…\n$ calculated_host_listings_count               <dbl> 5, 5, 5, 52, 52, 5, 7, 52…\n$ calculated_host_listings_count_entire_homes  <dbl> 0, 0, 0, 1, 1, 0, 1, 1, 1…\n$ calculated_host_listings_count_private_rooms <dbl> 5, 5, 5, 51, 51, 5, 6, 51…\n$ calculated_host_listings_count_shared_rooms  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ reviews_per_month                            <dbl> 0.14, 0.16, 0.31, 0.17, 0…\n$ geometry                                     <POINT [m]> POINT (41972.5 3639…\n```\n:::\n:::\n\n\nThe table above presents the contents of \\`listings_sf\\`. In this data frame, a new \\`geometry\\` column has been included, and the columns for longitude and latitude have been removed.\n\n## **8. Geoprocessing with sf Package**\n\nIn addition to supplying tools for managing geospatial data --- including import, export, projection assignment, and projection transformation --- the **sf** package also encompasses an extensive array of geoprocessing (commonly referred to as GIS analysis) capabilities, like creating buffers and performing point-in-polygon counts.\n\n### 8.1. **Buffering**\n\nCreating a buffer serves to examine and assess the spatial relationships among features within a certain distance. This buffer is usually defined in units of distance, such as meters or kilometers, and delineates a designated radius or width surrounding the feature.\n\nConsider the \\`CyclingPath\\` dataset as a case in point:\n\nIf there is a proposal to enhance the existing cycling path and it\\`s necessary to secure a 5-meter strip of land on each side of the path, one must calculate the extent of land required for acquisition and the total area of this land.\n\nFor this purpose, the `st_buffer()` function from the **sf** package is employed to create 5-meter buffers along the cycling paths.\n\n::: callout-note\n`dist` argument takes in the numeric buffer distance to be computed.\n:::\n\n::: callout-note\n`nQuadSegs` argument refers to 'the number of segments per quadrant' and is set by default to 30 (meaning circles created by buffers are composed of 4 × 30 = 120 lines). This argument may be useful to include when the memory consumed by the output of a buffer operation is a major concern (in which case it should be reduced) or when very high precision is needed (in which case it should be increased).\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)\n```\n:::\n\n\nSubsequently, the area within these buffers is calculated and then aggregated to determine the overall amount of land implicated.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbuffer_cycling$AREA <- st_area(buffer_cycling)\n\nsum(buffer_cycling$AREA)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1774367 [m^2]\n```\n:::\n:::\n\n\n### 8.2. **Point-in-polygon Count**\n\nThe number of points in each polygon given a set of points and a set of polygons.\n\nIn computational geometry, the point-in-polygon (PIP) challenge involves determining whether a point lies within, outside, or along the boundary of a polygon.\n\nFor instance, using the `PreSchoolsLocation` dataset:\n\nImagine a research initiative by a preschool group to analyze the spread of preschools across each Planning Subzone, aiming to ascertain the count and concentration of preschools within each subzone.\n\nThe **`st_intersects()`** function from the **sf** package is utilized to pinpoint preschools situated within each Planning Subzone. The **`lengths()`** function from Base R is then applied to tally the number of preschools within each Subzone, and the **`summary()`** function is employed to present the summary statistics for the newly computed `PreSch Count` field.\n\n::: callout-note\nThe functions **`st_intersects()`** and **`st_intersection()`** serve distinct purposes within spatial operations. **`st_intersects()`** yields a logical output, indicating the presence or absence of an intersection between two sets of geometries. On the other hand, **`st_intersection()`** conducts geometric operations, delivering the actual geometric intersection, as well as the difference or symmetric difference between two sets of geometries.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))\n\nsummary(mpsz3414$\"PreSch Count\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n```\n:::\n:::\n\n\n`top_n()` of **dplyr** package is used to list the Planning Subzone with the highest number of pre-schools.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_n(mpsz3414, 1, `PreSch Count`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n```\n:::\n:::\n\n\nThe following code chunk uses `st_area()` of **sf** package to derive the area of each Planning Subzone.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414$Area <- mpsz3414 %>%\n  st_area()\n```\n:::\n\n\nTo compute the density, `mutate()` of **dplyr** package is used.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- mpsz3414 %>%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)\n```\n:::\n\n\n## **9. Exploratory Data Analysis**\n\nLeveraging suitable **ggplot2** functions can facilitate the construction of effective statistical graphs for exploratory data analysis (EDA).\n\n### 9.1. **Histogram on Preschool Density**\n\nThe distribution of \\`PreSch Density\\` is displayed using the **`hist()`** function from the R Graphics package to create a histogram.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(mpsz3414$`PreSch Density`)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nThe following code chunk uses **ggplot2** functions such as `geom_histogram()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"white\",\n                 fill=\"steelblue\") +\n  labs(title = \"Are preschools even distributed in Singapore?\",\n       subtitle= \"Most Planning Subzones have a low preschool density (<10 preschools per km sq)\\nOne Planning Subzone has a preschool density of >30 preschools per km sq\",\n      x = \"Preschool density (per km sq)\",\n      y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n### 9.2. **Scatterplot between Preschool Density and Preschool Count**\n\nThe following code chunk, a scatterplot between Preschool Density and Preschool Count is plotted by using `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=mpsz3414, \n       aes(y = `PreSch Count`, \n           x= as.numeric(`PreSch Density`)))+\n  geom_point(color=\"steelblue\") +\n  xlim(0, 40) +\n  ylim(0, 40) +\n  labs(title = \"Scatterplot of Preschool Density and Preschool Count\",\n      x = \"Pre-school density (per km sq)\",\n      y = \"Pre-school count\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
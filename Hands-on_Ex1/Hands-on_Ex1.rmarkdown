---
title: "1A: Geospatial Data Wrangling with R"
author: "Su Sandi Cho Win"
date: "19 November 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---


## 1. Overview

In this hands-on exercise, I learn how to import and wrangle geospatial data in using appropriate R Packages.

## 2. Getting Started

The following code chunk installs and loads **sf** and **tidyverse** packages into R environment.

::: callout-note
**sf** package is used for importing, managing, and processing geospatial data.
:::


```{r}
pacman::p_load(sf, tidyverse)
```


The data sets used are:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://beta.data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://beta.data.gov.sg/)

-   Cycling Path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data/)

## 3. Importing Geospatial Data

### 3.1. Importing Polygon Feature Data

The following code chunk uses \`st_read()\` function from the **sf** package to import \`MP14_SUBZONE_WEB_PL\` shapefile into R as **polygon feature data** frame.

::: callout-note
When loading geospatial data in shapefile format, two arguments are utilized: firstly, `dsn` to specify the data path, and secondly, `layer` to indicate the name of the shapefile. It's not necessary to include file extensions such as .shp, .dbf, .prj, or .shx.
:::


```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
```


The \`mpsz\` simple feature data frame consists of **323** multipolygon features and includes **15** fields. It is defined using the **svy21** projected coordinate system.

::: callout-note
The **svy21**, also known as the Singapore **svy21** Projected Coordinate System, is a coordinate system employed by Singapore. It uses the Transverse Mercator projection, mapping geographical coordinates that reference the WGS 84 ellipsoid.

The bounding box of this system displays the extent of the data in both the x and y dimensions.
:::

### 3.2. Importing Polyline Feature Data

The following code chunk uses \`st_read()\` function from the **sf** package to import \`CyclingPath\` shapefile into R as **line feature data** frame.


```{r}
cyclingpath <- st_read(dsn = "data/geospatial",
                       layer = "CyclingPathGazette")
```


The \`cyclingpath\` linestring feature data frame contains a total of **2558** features and comprises **2** fields. It is also defined within the **svy21** projected coordinate system.

### 3.3. Importing GIS Data

The following code chunk uses \`st_read()\` function from the **sf** package to import \`PreSchoolsLocation\` into R.

::: callout-note
The complete path and kml file extension must be provided in kml format.
:::


```{r}
preschool <- st_read("data/geospatial/PreSchoolsLocation.kml")
```


The \`preschool\` point feature data frame contains a combined total of **2290** features and comprises **2** fields. Notably, unlike the two preceding simple feature data frames, \`preschool\` employs the **wgs84** geographic coordinate system.

::: callout-note
**wgs84** represents the latest version of the World Geodetic System (WGS), a global standard utilized in fields like cartography, geodesy, and satellite navigation, including GPS. It is a geographic coordinate system that determines locations on Earth using a three-dimensional spherical surface model.
:::

## **4. Checking the Content of A Simple Feature Data Frame**

The column in the simple feature (sf) data frame that holds the geometries is structured as a list with a class of **sfc**. There are two methods to inspect the data within it:

-   Obtain the geometry list-column by using either \`mpsz\$geom\` or \`mpsz\[\[i\]\]\`.

-   Utilize \`st_geometry\` to present details about the feature class, including information about the geometry type, the geographic extent of the features, and the coordinate system used in the data.


```{r}
st_geometry(mpsz)
```


A peek into the data using the \`glimpse\` function from the **dplyr** package unveils relevant attribute details, including the data type of each field.


```{r}
glimpse(mpsz)
```


Using \`head()\` in the base R provides a comprehensive view of a feature object\`s information.

::: callout-note
Adjust the "n" argument to modify the number of observations to a reasonable value.
:::


```{r}
head(mpsz, n=5)
```


## **5. Plotting Geospatial Data**

In the realm of geospatial data analytics, merely examining feature details is inadequate. To visualize geospatial features, you can employ the \`plot()\` function from **R Graphic**.

::: callout-note
By default, a sf object generates a multiplot. The subsequent plot illustrates the initial 9 of 15 attributes. To adjust the quantity of attributes displayed in the plot, modify the \`max.plot\` parameter to a desired value.
:::


```{r}
plot(mpsz)
```


To plot the geometric data exclusively , apply \`st_geometry\` to the data frame prior to initiating the plot.


```{r}
plot(st_geometry(mpsz))
```


A plot focusing on a particular attribute of the sf object can also be created.


```{r}
plot(mpsz["PLN_AREA_N"])
plot(mpsz["SUBZONE_N"])
plot(mpsz["REGION_N"])
```


::: callout-note
\`plot()\` is meant for plotting the geospatial object for a quick look. For high cartographic quality plot, other R package such as **tmap** should be used.
:::

## **6. Map Projection**

Map projection is a critical characteristic of geospatial data. To carry out geoprocessing tasks with two different geospatial datasets, they need to be aligned within the same coordinate system.

The process of transforming a simple feature data frame from one coordinate system to another is technically referred to as **projection transformation**.

### 6.1. Assigning EPSG code to a simple feature data frame

Typical problems that may arise while importing geospatial data into R include:

-   The absence of a coordinate system for the original data, which can occur if, for instance, the .proj file is missing for an ESRI shapefile.

-   Incorrect assignment of a coordinate system during the import procedure.

To examine the coordinate system of the \`mpsz\` simple feature data frame, employ the \`st_crs()\` function from the **sf** package.


```{r}
st_crs(mpsz)
```


The printout above shows the EPSG as 9001. Nonetheless, the \`mpsz\` data frame actually utilizes the **svy21** projection, for which the appropriate EPSG code is 3414. To apply the right EPSG code to the \`mpsz\` data frame, utilize the \`st_set_crs()\` function from the **sf** package.


```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```


The EPSG code indicated is now 3414.


```{r}
st_crs(mpsz3414)
```


### 6.2 **Transforming the projection of preschool from wgs84 to svy21**

In geospatial analytics, it is a common practice to convert data from a Geographic Coordinate System (GCS) to a Projected Coordinate System (PCS). GCS may not be suitable for analyses that require accurate distance or area measurements, as the length of one degree varies significantly with latitude --- it\`s shorter near the poles and longer near the equator. On the other hand, PCS offers uniform measurements of length and area across different locations. The \`st_transform()\` function in the **sf** package is used for mathematically reprojecting data frames from one coordinate system to another.

Given that the \`preschool\` data frame is currently in the **wgs84** coordinate system, it can be effectively transformed to the **svy21** projected coordinate system, which has the coordinate reference system (CRS) code of 3414.


```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```


\`preschool3414\` data frame is now in **svy21** projected coordinate system.


```{r}
st_geometry(preschool3414)
```


::: callout-note
The success of the transformation can be confirmed by examining the x and y extents of the data as shown in the Bounding Box. Most geographic coordinate systems operate within a decimal degree range of 0-360. However, after the projection transformation of the \`preschool3414\` data frame, the x and y extents of the data will be significantly greater than 360, indicating the change to a projected coordinate system.
:::

## **7. Importing and Converting an Aspatial Data**

Typically, one might encounter aspatial data that includes two separate fields representing the x- and y-coordinates of the data points. Such aspatial data can be transformed from a tibble data frame into a simple feature data frame, enabling more comprehensive geospatial analysis.

### 7.1. **Importing Aspatial Data as Tibble Data Frame**

The following code chunk uses \`read_csv()\` function of **readr** package to import the \`listings.csv\` data from Airbnb. The output R object is a tibble data frame called \`listings\`.


```{r}
listings <- read_csv("data/aspatial/listings.csv")
```


The following code chunk uses \`list()\` of **Base R** instead of \`glimpse()\` to examine if the data file has been imported correctly.


```{r}
list(listings) 
```


The \`listing\` tibble data frame consists of 3483 rows and 18 columns. For the next step, \`latitude\` and \`longitude\` columns will be used.

::: callout-note
\`latitude\` and \`longitude\` columns are in decimal degree format, suggesting that the data could be in **wgs84** geographic coordinate system.
:::

### 7.2. **Converting Tibble Data Frame to Simple Feature Data Frame**

The following code chunk converts \`listing\` data frame into a simple feature data frame using \`st_as_sf()\` of **sf** package.


```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs = 4326) %>%
  st_transform(crs = 3414)
```


::: callout-note
The \`coords\` argument necessitates specifying the column name for the x-coordinates first, followed by the column name for the y-coordinates.
:::

::: callout-note
The \`crs\` argument needs the coordinate system to be defined in the EPSG format. For instance, EPSG 4326 corresponds to the **wgs84** geographic coordinate system, while EPSG 3414 represents the **svy21** projected coordinate system. For EPSG codes of other countries, you can consult the website **epsg.io**.
:::


```{r}
glimpse(listings_sf)
```


The table above presents the contents of \`listings_sf\`. In this data frame, a new \`geometry\` column has been included, and the columns for longitude and latitude have been removed.

## **8. Geoprocessing with sf Package**

In addition to supplying tools for managing geospatial data --- including import, export, projection assignment, and projection transformation --- the **sf** package also encompasses an extensive array of geoprocessing (commonly referred to as GIS analysis) capabilities, like creating buffers and performing point-in-polygon counts.

### 8.1. **Buffering**

Creating a buffer serves to examine and assess the spatial relationships among features within a certain distance. This buffer is usually defined in units of distance, such as meters or kilometers, and delineates a designated radius or width surrounding the feature.

Consider the \`CyclingPath\` dataset as a case in point:

If there is a proposal to enhance the existing cycling path and it\`s necessary to secure a 5-meter strip of land on each side of the path, one must calculate the extent of land required for acquisition and the total area of this land.

For this purpose, the `st_buffer()` function from the **sf** package is employed to create 5-meter buffers along the cycling paths.

::: callout-note
`dist` argument takes in the numeric buffer distance to be computed.
:::

::: callout-note
`nQuadSegs` argument refers to 'the number of segments per quadrant' and is set by default to 30 (meaning circles created by buffers are composed of 4 × 30 = 120 lines). This argument may be useful to include when the memory consumed by the output of a buffer operation is a major concern (in which case it should be reduced) or when very high precision is needed (in which case it should be increased).
:::


```{r}
buffer_cycling <- st_buffer(cyclingpath, dist=5, nQuadSegs=30)
```


Subsequently, the area within these buffers is calculated and then aggregated to determine the overall amount of land implicated.


```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)

sum(buffer_cycling$AREA)
```


### 8.2. **Point-in-polygon Count**

The number of points in each polygon given a set of points and a set of polygons.

In computational geometry, the point-in-polygon (PIP) challenge involves determining whether a point lies within, outside, or along the boundary of a polygon.

For instance, using the `PreSchoolsLocation` dataset:

Imagine a research initiative by a preschool group to analyze the spread of preschools across each Planning Subzone, aiming to ascertain the count and concentration of preschools within each subzone.

The **`st_intersects()`** function from the **sf** package is utilized to pinpoint preschools situated within each Planning Subzone. The **`lengths()`** function from Base R is then applied to tally the number of preschools within each Subzone, and the **`summary()`** function is employed to present the summary statistics for the newly computed `PreSch Count` field.

::: callout-note
The functions **`st_intersects()`** and **`st_intersection()`** serve distinct purposes within spatial operations. **`st_intersects()`** yields a logical output, indicating the presence or absence of an intersection between two sets of geometries. On the other hand, **`st_intersection()`** conducts geometric operations, delivering the actual geometric intersection, as well as the difference or symmetric difference between two sets of geometries.
:::


```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))

summary(mpsz3414$"PreSch Count")
```


`top_n()` of **dplyr** package is used to list the Planning Subzone with the highest number of pre-schools.


```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```


The following code chunk uses `st_area()` of **sf** package to derive the area of each Planning Subzone.


```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```


To compute the density, `mutate()` of **dplyr** package is used.


```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```


## **9. Exploratory Data Analysis**

Leveraging suitable **ggplot2** functions can facilitate the construction of effective statistical graphs for exploratory data analysis (EDA).

### 9.1. **Histogram on Preschool Density**

The distribution of \`PreSch Density\` is displayed using the **`hist()`** function from the R Graphics package to create a histogram.


```{r}
hist(mpsz3414$`PreSch Density`)
```


The following code chunk uses **ggplot2** functions such as `geom_histogram()`.


```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="white",
                 fill="steelblue") +
  labs(title = "Are preschools even distributed in Singapore?",
       subtitle= "Most Planning Subzones have a low preschool density (<10 preschools per km sq)\nOne Planning Subzone has a preschool density of >30 preschools per km sq",
      x = "Preschool density (per km sq)",
      y = "Frequency")
```


### 9.2. **Scatterplot between Preschool Density and Preschool Count**

The following code chunk, a scatterplot between Preschool Density and Preschool Count is plotted by using `geom_point()`.


```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="steelblue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "Scatterplot of Preschool Density and Preschool Count",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```


---
title: "Urban Mobility Analysis"
author: "Su Sandi Cho Win"
date: "19 November 2023"
date-modified: "last-modified"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

Urban Mobility Analysis by using passenger volume by origin-destination bus stops.

## Getting Started

The code chunk below loads the following packages:

-   **tmap**: for thematic mapping
-   **sf**: for geospatial data handling
-   **tidyverse**: for non-spatial data handling

```{r}
pacman::p_load(sf, tmap, tidyverse)
```

The data used for this analysis includes:

-   Subzone Boundary Data from the Master Plan 2019 (last updated Dec 2019) from [data.gov.sg](https://beta.data.gov.sg/collections/1749/view).

-   Bus Stop Location Data (last updated Jul 2023) obtained from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/static-data.html).

-   Passenger Volume Data for Aug-Oct 2023, focusing on origin and destination bus stops, also retrieved from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/dynamic-data.html).

## Preparing Flow Data

### Importing Passenger Volume by Origin-Destination Bus Stops

Firstly, we will import the *Passenger Volume by Origin-Destination Bus Stops* data set download from LTADataMall by using \`read_csv()\` of **readr** package and name the dataframe as \`odbus\`.

```{r}
#| eval: false
odbus <- read_csv("data/aspatial/origin_destination_bus_202308.csv")
```

To treat the numeric variables \`ORIGIN_PT_CODE\` and \`DESTINATION_PT_CODE\` as categorical grouping variables in R, they should be converted to factors. This transformation allows R to recognize and work with them as categorical variables.

```{r}
#| eval: false
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE)
```

### Extracting Commuting Flow Data

The following code chunk extracts data related to commuting patterns on weekdays during the busy morning rush hours (7 am, 8 am, and 9 am).

```{r}
#| eval: false
origtrip_7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

### Importing Geospatial Data

The following code chunk uses \`st_read()\` function from the **sf** package to import \`BusStop\` shapefile into R dataframe named \`BusStop\`. It is configured with the **svy21** projected coordinate system, with a \`crs\` setting of 3414.

```{r}
#| eval: false
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

### Importing Planning Subzone Data

The following code chunk uses \`st_read()\` function from the **sf** package to import \`MPSZ-2019\` shapefile into R dataframe named \`mpsz\`. To enable the combined use of \`mpsz\` with \`BusStop\`, \`mpsz\` is configured with the **svy21** projected coordinate system, with a \`crs\` setting of 3414.

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
mpsz
```

---
title: "3: Processing and Visualising Flow Data"
author: "Su Sandi Cho Win"
date: "01 December 2023"
date-modified: "01 December 2023"
format: html
execute:
  echo: true
  eval: true
  warning: false
editor: visual
---

## 1. **Overview**

Spatial interaction refers to the movement of people, goods, or information between different geographical locations. It encompasses a wide range of activities, including the transportation of goods, energy transfers, global trade in valuable artifacts, scheduling of flights, dealing with traffic congestion during rush hours, and even the flow of pedestrians in a city.

Each instance of spatial interaction can be thought of as a pair of locations, one representing the origin, and the other representing the destination. These pairs can be organized into a matrix, commonly known as an origin/destination (OD) matrix. This matrix is structured so that rows correspond to the origins (usually centroids of geographic areas), and columns correspond to the destinations (also centroids of geographic areas).

In this practical exercise, we will gain hands-on experience in building an OD matrix using data from the Passenger Volume by Origin Destination Bus Stops dataset obtained from LTA DataMall. By the end of this exercise, you will have learned how to:

-   Import and extract OD data for a specific time interval.

-   Import and store geospatial data (e.g., bus stops and planning subzones) as sf tibble data frame objects.

-   Assign planning subzone codes to the bus stops in the sf tibble data frame.

-   Create geospatial data that represents the desire lines between origin and destination points from the OD data.

-   Visualize passenger volume between origin and destination bus stops using the desire lines data.

Through this exercise, we will develop practical skills for working with spatial data and analyzing spatial interactions, which are crucial in various fields such as urban planning, transportation management, and logistics.

## **2. Getting Started**

For the purpose of this exercise, four r packages will be used. They are:

-   sf for importing, integrating, processing and transforming geospatial data.

-   tidyverse for importing, integrating, wrangling and visualising data.

-   tmap for creating thematic maps.

```{r}
pacman::p_load(tmap, sf, DT, stplanr, performance, ggpubr, tidyverse)
```

## **3. Preparing the Flow Data**

### **3.1. Importing the OD data**

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202310.csv")
```

Let use display the *odbus* tibble data table by using the code chunk below.

```{r}
glimpse(odbus)
```

A brief inspection of the odbus tibble data frame reveals that the entries in the ORIGIN_PT_CODE and DESTINATION_PT_CODE columns are represented as numeric data types. Consequently, the following code segment is employed to transform these data values into character data types.

### **3.2. Extracting the study data**

For the purpose of this exercise, we will extract commuting flows on weekday and between 6 and 9 o'clock.

```{r}
odbus6_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 6 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

Table below shows the content of *odbus6_9*.

```{r}
datatable(odbus6_9)
```

We will save the output in rds format for future used.

```{r}
write_rds(odbus6_9, "data/rds/odbus6_9.rds")
```

The code chunk below will be used to import the save odbus6_9.rds into R environment.

```{r}
odbus6_9 <- read_rds("data/rds/odbus6_9.rds")
```

## **4. Working with Geospatial Data**

For the purpose of this exercise, two geospatial data will be used. They are:

-   *BusStop*: This data provides the location of bus stop as at last quarter of 2022.

-   *MPSZ-2019*: This data provides the sub-zone boundary of URA Master Plan 2019.

Both data sets are in **ESRI** shapefile format.

### **4.1. Importing geospatial data**

Two geospatial data will be used in this exercise, they are:

```{r}
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial", layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz
```

::: callout-note
-   `st_read()` function of **sf** package is used to import the shapefile into R as sf data frame.

-   `st_transform()` function **of** sf package is used to transform the projection to crs 3414.
:::

## **5. Geospatial data wrangling**

### **5.1. Combining Busstop and mpsz**

The following code chunk populates the planning subzone code (i.e. SUBZONE_C) of *mpsz* sf data frame into *busstop* sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

::: callout-note
-   `st_intersection()` is used to perform point and polygon overlay and the output will be in point sf object.

-   `select()` of **dplyr** package is then use to retain only BUS_STOP_N and SUBZONE_C in the *busstop_mpsz* sf data frame.

-   Five bus stops are excluded in the resultant data frame because they are outside of Singapore boundary.
:::

```{r}
datatable(busstop_mpsz)
```

Before moving to the next step, it is wise to save the output into rds format.

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.rds")  
```

Next, we are going to append the planning subzone code from *busstop_mpsz* data frame onto *odbus6_9* data frame.

```{r}
od_data <- left_join(odbus6_9 , busstop_mpsz,
                     by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

Before we continue, the following code chunk is used to check for duplicating records.

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()
```

If duplicated records are found, the code chunk below will be used to retain the unique records.

```{r}
od_data <- unique(od_data)
```

::: callout-note
It is a good practice to confirm if the duplicating records issue has been addressed fully.
:::

Next, we will update *od_data* data frame with the planning subzone codes.

```{r}
od_data <- left_join(od_data , busstop_mpsz,
                     by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n() > 1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na() %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>%
  summarise(MORNING_PEAK = sum(TRIPS))
```

It is time to save the output into an rds file format.

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

## **6. Visualizing Spatial Interaction**

In this section, we prepare a desire line by using **stplanr** package.

### **6.1. Removing intra-zonal flows**

We will not plot the intra-zonal flows. The code chunk below will be used to remove intra-zonal flows.

```{r}
od_data1 <- od_data[od_data$ORIGIN_SZ!=od_data$DESTIN_SZ,]
```

### 6.2. **Creating desire lines**

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = od_data1,
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### **6.3. Visualizing the desire lines**

To visualize the resulting desire lines, the code chunk below is used.

```{r}

tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

::: callout-warning
The rendering process takes more time because of the transparency argument (i.e. alpha).
:::

When the flow data are very messy and highly skewed like the one shown above, it is wiser to focus on selected flows, for example flow greater than or equal to 5000 as shown below.

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%
  filter(MORNING_PEAK >= 5000) %>%
tm_shape() +
  tm_lines(lwd = "MORNING_PEAK",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

---
title: "draft"
---

```{r}
pacman::p_load(tmap, sf, sp, DT, performance, reshape2, ggpubr, tidyverse)
```

### **Combining Busstop and mpsz**

```{r}
# Load Bus Stop Location data
busstop <- st_read(dsn = "data/geospatial", layer = "BusStop") %>%
  st_transform(crs = 3414) %>%
  subset(select = -c(BUS_ROOF_N, LOC_DESC)) %>%
  distinct(BUS_STOP_N, .keep_all = TRUE)
```

## **Computing Distance Matrix**

### **Converting from sf data.table to SpatialPolygonsDataFrame**

```{r}
mpsz_sp <- as(mpsz, "Spatial")
mpsz_sp
```

### **Computing the distance matrix**

```{r}
dist <- spDists(mpsz_sp, 
                longlat = FALSE)
head(dist, n=c(10, 10))
```

### **Labelling column and row heanders of a distance matrix**

```{r}
sz_names <- mpsz$SUBZONE_C
```

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### **Pivoting distance value by SUBZONE_C**

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

### **Updating intra-zonal distances**

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair %>%
  summary()
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

```{r}
write_rds(distPair, "data/rds/distPair.rds") 
```

## Preparing Flow Data

```{r}
# Load Passenger Volume data
file <- "data/aspatial/origin_destination_bus_202310.csv"
flow_data <-
  read_csv(file, show_col_types = FALSE) %>%
  filter(DAY_TYPE == "WEEKENDS/HOLIDAY") %>%
  filter(TIME_PER_HOUR >= 11 & TIME_PER_HOUR <= 14) %>%
  subset(select = -c(YEAR_MONTH, DAY_TYPE, TIME_PER_HOUR, PT_TYPE)) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         DESTIN_BS = DESTINATION_PT_CODE,
         TRIPS = TOTAL_TRIPS)
### TODO: to filter out Malaysia bus stop
```

```{r}
write_rds(flow_data, "data/rds/flow_data.rds")
```

```{r}
flow_data <- read_rds("data/rds/flow_data.rds")
```

### **Separating intra-flow from passenger volume df**

```{r}
flow_data$FlowNoIntra <- ifelse(flow_data$ORIGIN_BS == flow_data$DESTIN_BS,
                                0, flow_data$TRIPS)
flow_data$offset <- ifelse(flow_data$ORIGIN_BS == flow_data$DESTIN_BS,
                           0.000001, 1) 
### TODO: why am I doing offset?
```

### **Combining passenger volume data with distance value**

```{r}
flow_data$ORIGIN_BS <- as.factor(flow_data$ORIGIN_BS)
flow_data$DESTIN_BS <- as.factor(flow_data$DESTIN_BS)
```

```{r}
# Create an analytical hexagon grid based on bus stops
hexagon_grid_sf <-
  st_make_grid(busstop,
               cellsize = 750,
               what = "polygon",
               square = FALSE) %>%
  st_sf(hexagon_grid) %>%
  mutate(grid_id = 1:length(lengths(hexagon_grid))) # add grid ID
```

```{r}
# BUS_STOP_N, grid_id
busstop_hex = busstop %>% st_intersection(hexagon_grid_sf) %>% st_drop_geometry()

# ORIGIN_GRID_ID, DESTIN_GRID_ID
flow_data_OD <- flow_data %>%
  left_join(busstop_hex, by = c("ORIGIN_BS" = "BUS_STOP_N")) %>%
  rename(ORIGIN_GRID_ID = grid_id) %>%
  left_join(busstop_hex, by = c("DESTIN_BS" = "BUS_STOP_N")) %>%
  rename(DESTIN_GRID_ID = grid_id)
```

```{r}
write_rds(flow_data_OD, "data/rds/flow_data_OD.rds")
```

```{r}
flow_data_OD <- read_rds("data/rds/flow_data_OD.rds")
```

```{r}
flow_data_2column = flow_data_OD %>% 
  subset(select = c(ORIGIN_GRID_ID, DESTIN_GRID_ID))
flowLine <- stplanr::od2line(flow = flow_data_2column,
                    zones = hexagon_grid_sf,
                    zone_code = "grid_id")
```

```{r}
tm_shape(mpsz) +
  tm_polygons() +
flowLine %>%
tm_shape() +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 7, 10),
           n = 6,
           alpha = 0.3)
```

```{r}
flow_data_sf <- st_as_sf(flow_data_OD)
```

```{r}

```

```{r}

```

```{r}
bus_stops = subset(busstop, select=c(BUS_STOP_N)) %>% st_drop_geometry()
df_count <- bus_stops %>%
  group_by(BUS_STOP_N) %>%
  summarise(count = n()) %>%
  filter(count > 1)
```

```{r}
# Merge the point counts back into the honeycomb grid by bus stop origin
hexagon_grid_sf <- hexagon_grid_sf %>%
  st_join(point_counts, by = "grid_id")

# remove grid without value of 0 (i.e. no points in side that grid)
honeycomb_count <-
  filter(hexagon_grid_sf, TOT_TRIPS > 0)
```

```{r}
tmap_mode("view")
tm_shape(honeycomb_count) +
  tm_fill(
    col = "TOT_TRIPS",
    palette = "Reds",
    style = "quantile",
    title = "Number of Trips by Bus Stop Origin",
    id = "grid_id",
    showNA = FALSE,
    alpha = 0.6,
    popup.vars = c("Number of Trips: " = "TOT_TRIPS",
                   "Bus STOP ORIGIN:" = "ORIGIN_PT_CODE"),
    popup.format = list(
      TOT_TRIPS = list(format = "f", digits = 0),
      ORIGIN_PT_CODE = list(format = "f", digits = 0)
    )
  ) +
  tm_borders(col = "grey40", lwd = 0.7)
tmap_mode("plot")
```

## Preparing Flow Data
